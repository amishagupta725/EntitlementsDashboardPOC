{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMISHA\\\\Desktop\\\\Web_Development_Projects\\\\Analytics_Dashboard_React\\\\client\\\\src\\\\components\\\\Charts\\\\Piechart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { PieChart, Pie, Legend, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Piechart = ({\n  fetcheddata\n}) => {\n  _s();\n\n  const [counttype, setData] = useState([]);\n  useEffect(() => {\n    const arrdata = [];\n    const counttype = [];\n    if (fetcheddata.length) fetcheddata.forEach(d => {\n      d.group_by_Type.buckets.forEach(bucket => {\n        counttype.push({\n          'total': bucket.total_count.value,\n          'type': bucket.key\n        });\n      });\n      arrdata.push({\n        \"key\": d.key_as_string,\n        \"count\": counttype\n      });\n    });\n    setData(counttype);\n  }, [fetcheddata]);\n  const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"];\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: 800,\n    height: 800,\n    children: /*#__PURE__*/_jsxDEV(PieChart, {\n      width: 400,\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(Pie, {\n        data: counttype,\n        cx: 200,\n        cy: 200,\n        outerRadius: 80,\n        fill: \"#8884d8\",\n        dataKey: \"total\",\n        label: ({\n          cx,\n          cy,\n          midAngle,\n          innerRadius,\n          outerRadius,\n          total,\n          index\n        }) => {\n          console.log(\"handling label?\");\n          const RADIAN = Math.PI / 180;\n          const radius = 25 + innerRadius + (outerRadius - innerRadius);\n          const x = cx + radius * Math.cos(-midAngle * RADIAN);\n          const y = cy + radius * Math.sin(-midAngle * RADIAN);\n          return /*#__PURE__*/_jsxDEV(\"text\", {\n            x: x,\n            y: y,\n            fill: \"#FF8042\",\n            textAnchor: x > cx ? \"start\" : \"end\",\n            dominantBaseline: \"central\",\n            children: counttype[index].type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this);\n        },\n        labelLine: ({\n          cx,\n          cy,\n          midAngle,\n          innerRadius,\n          outerRadius,\n          value,\n          index\n        }) => {\n          const RADIAN = Math.PI / 180; // eslint-disable-next-line\n\n          let radius1 = 20 + innerRadius + (outerRadius - innerRadius);\n          let radius2 = innerRadius + (outerRadius - innerRadius); // eslint-disable-next-line\n\n          let x2 = cx + radius1 * Math.cos(-midAngle * RADIAN); // eslint-disable-next-line\n\n          let y2 = cy + radius1 * Math.sin(-midAngle * RADIAN);\n          let x1 = cx + radius2 * Math.cos(-midAngle * RADIAN); // eslint-disable-next-line\n\n          let y1 = cy + radius2 * Math.sin(-midAngle * RADIAN);\n\n          if (value < 30) {\n            return null;\n          }\n\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2,\n            stroke: \"#ccc\",\n            strokeWidth: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 35\n          }, this);\n        },\n        children: counttype.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n          fill: COLORS[index % COLORS.length]\n        }, `cell-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Piechart, \"uH510iL365EHLI+cOsqrg6VfPt8=\");\n\n_c = Piechart;\nexport default Piechart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piechart\");","map":{"version":3,"sources":["C:/Users/AMISHA/Desktop/Web_Development_Projects/Analytics_Dashboard_React/client/src/components/Charts/Piechart.js"],"names":["React","useState","useEffect","PieChart","Pie","Legend","Tooltip","ResponsiveContainer","Cell","Piechart","fetcheddata","counttype","setData","arrdata","length","forEach","d","group_by_Type","buckets","bucket","push","total_count","value","key","key_as_string","COLORS","cx","cy","midAngle","innerRadius","outerRadius","total","index","console","log","RADIAN","Math","PI","radius","x","cos","y","sin","type","radius1","radius2","x2","y2","x1","y1","map","entry"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport { PieChart, Pie, Legend, Tooltip, ResponsiveContainer,Cell } from 'recharts';\r\n\r\n\r\nconst Piechart = ({fetcheddata}) => {\r\n\r\n const [counttype, setData] = useState([]); \r\n useEffect(()=>{\r\n  const arrdata = [];\r\n  const counttype = [];\r\n  if (fetcheddata.length) fetcheddata.forEach((d)=>{\r\n        d.group_by_Type.buckets.forEach((bucket)=>{\r\n        counttype.push({'total':bucket.total_count.value,'type':bucket.key});\r\n    })  \r\n      arrdata.push({\r\n        \"key\" : d.key_as_string,\r\n        \"count\" : counttype\r\n      })\r\n    })\r\n    setData(counttype);\r\n },[fetcheddata])\r\n \r\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"];\r\n\r\n\r\n return (\r\n        <ResponsiveContainer width={800} height={800}>\r\n        <PieChart width={400} height={400}>\r\n        <Pie\r\n        data={counttype}\r\n        cx={200}\r\n        cy={200}\r\n        outerRadius={80}\r\n        fill=\"#8884d8\"\r\n        dataKey=\"total\"\r\n        label={({\r\n          cx,\r\n          cy,\r\n          midAngle,\r\n          innerRadius,\r\n          outerRadius,\r\n          total,\r\n          index\r\n        }) => {\r\n          console.log(\"handling label?\");\r\n          const RADIAN = Math.PI / 180;\r\n          const radius = 25 + innerRadius + (outerRadius - innerRadius);\r\n          const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n          const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n          return (\r\n            <text\r\n              x={x}\r\n              y={y}\r\n              fill=\"#FF8042\"\r\n              textAnchor={x > cx ? \"start\" : \"end\"}\r\n              dominantBaseline=\"central\"\r\n            >\r\n              {counttype[index].type} \r\n            </text>\r\n          );\r\n        }}\r\n        labelLine={({\r\n          cx,\r\n          cy,\r\n          midAngle,\r\n          innerRadius,\r\n          outerRadius,\r\n          value,\r\n          index\r\n          }) => {\r\n          const RADIAN = Math.PI / 180;\r\n          \r\n                              // eslint-disable-next-line\r\n                              let radius1 = 20 + innerRadius + (outerRadius - innerRadius);\r\n          \r\n                              let radius2 = innerRadius + (outerRadius - innerRadius);\r\n                              // eslint-disable-next-line\r\n                              let x2 = cx + radius1 * Math.cos(-midAngle * RADIAN);\r\n                              // eslint-disable-next-line\r\n                              let y2 = cy + radius1 * Math.sin(-midAngle * RADIAN);\r\n          \r\n                              let x1 = cx + radius2 * Math.cos(-midAngle * RADIAN);\r\n                              // eslint-disable-next-line\r\n                              let y1 = cy + radius2 * Math.sin(-midAngle * RADIAN);\r\n          \r\n                              if (value<30){\r\n                                  return null;\r\n                              }\r\n          \r\n                              return(\r\n                                  <line x1={x1} y1={y1} x2={x2} y2={y2} stroke=\"#ccc\" strokeWidth={1}>\r\n          \r\n                                  </line>\r\n                              )\r\n                          }}\r\n      >\r\n        {counttype.map((entry, index) => (\r\n          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n        ))}\r\n      </Pie>\r\n        </PieChart>\r\n      </ResponsiveContainer>   \r\n    )\r\n}\r\n\r\nexport default Piechart;\r\n"]},"metadata":{},"sourceType":"module"}